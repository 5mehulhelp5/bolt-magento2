<?php
/**
 * Bolt magento2 plugin
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   Bolt
 * @package    Bolt_Boltpay
 * @copyright  Copyright (c) 2017-2024 Bolt Financial, Inc (https://www.bolt.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Product page Bolt Checkout button
 *
 * @var $block \Bolt\Boltpay\Block\JsProductPage
 * @var $secureRenderer \Magento\Framework\View\Helper\SecureHtmlRenderer
 */
if ($block->shouldDisableBoltCheckout()) { return;
}

// return if PPC option is disabled or we aren't on product page
if (!$block->isBoltProductPage()) { return;
}

if (!$block->isSupportableType()) { return;
}

$additionalClass = $block->getAdditionalCheckoutButtonClass();
$additionalCheckoutButtonAttributes = '';
foreach ($block->getAdditionalCheckoutButtonAttributes() as $attrName => $attrValue) {
    $additionalCheckoutButtonAttributes .= $block->escapeHtmlAttr($attrName)
        . '="'
        . $block->escapeHtmlAttr($attrValue)
        . '" ';
}
?>
<?php if(!$block->isInstantCheckoutButton()): ?>
    <div class="bolt-product-checkout-button bolt-multi-step-checkout <?= /* @noEscape */ $additionalClass;?>"
         style="<?= /* @noEscape */ $block->getButtonCssStyles(); ?>" <?= /* @noEscape */ $additionalCheckoutButtonAttributes; ?>></div>
<?php else: ?>
    <div data-tid="instant-bolt-checkout-button" class="<?= /* @noEscape */ $additionalClass;?>">
        <object data="<?=$block->getCheckoutCdnUrl();?>/v1/checkout_button?publishable_key=<?=$block->getCheckoutKey();?>" class="bolt-product-checkout-button">
        </object>
    </div>
<?php endif; ?>
<?php $scriptString = <<<script

script;
?>
<script>
    const initBoltProductButton = (event) => {
        window.removeEventListener("private-content-loaded", initBoltProductButton);
        const sectionData = event.detail.data;
        const customer = sectionData.customer;
        const isGuestCheckoutAllowed = <?= /* @noEscape */ $block->isGuestCheckoutAllowed(); ?>;
        const itemPrice = <?= /* @noEscape */ $block->getProduct()->getFinalPrice(); ?>;

        var settings = window.boltConfig;
        var trackCallbacks = settings.trackCallbacks;

        // On multiple checkout open/close actions the success event remains registered
        // resulting in making the success call multiple times. This variable stores
        // the last request to be aborted before new one is sent.
        var controller = new AbortController();
        var signal = controller.signal;
        const addToCartForm = document.querySelector('#product_addtocart_form');
        var callbacks = {

            close: function () {
                popUpOpen = false;
                trackCallbacks.onClose();

                if (callbacks.success_url) {
                    // redirect on success order save
                    location.href = callbacks.success_url;
                }
            },

            onCheckoutStart: function() {
                trackCallbacks.onCheckoutStart();
            },

            onShippingDetailsComplete: function(address) {
                trackCallbacks.onShippingDetailsComplete(address);
            },

            onShippingOptionsComplete: function() {
                trackCallbacks.onShippingOptionsComplete();
            },

            onPaymentSubmit: function() {
                trackCallbacks.onPaymentSubmit();
            },

            onNotify: function (event) {
                trackCallbacks.onNotify(event);
            },

            success: function (transaction, callback) {
                /**
                 * Success transaction handler.
                 * Sets the success url for the non-preauth flow.
                 * Calls additional javascript if defined in configuration.
                 * Triggers on success track event handler.
                 * Finally, calls the callback function
                 * that finishes the checkout modal operation.
                 *
                 * param object data    response from the non-preauth order/save controller, optional
                 * return void
                 */
                var processSuccess = function (data) {
                    const browserStorage = hyva.getBrowserStorage();
                    if (browserStorage) {
                        browserStorage.removeItem('mage-cache-storage');
                    }
                    try {
                        if (typeof data !== 'undefined') {
                            callbacks.success_url = data.success_url;
                        }
                        trackCallbacks.onSuccess(data);
                    } finally {
                        callback();
                    }
                };

                if (settings.is_pre_auth) {
                    processSuccess();
                    return;
                }

                // abort previously sent save order request.
                controller.abort();
                // get thr transaction reference
                var parameters = [];
                parameters.push('form_key=' + $('[name="form_key"]').val());
                parameters.push('reference=' + transaction.reference);
                parameters = parameters.join('&');
                // update order ajax request callback
                // sets the success order page redirect url from received data
                // and calls the final Bolt defined callback
                var onSuccess = function(data){
                    if (data.status !== 'success') {
                        if (data.message) {
                            showBoltErrorMessage('', data.reference);
                            // pretend order creation was success...
                            // we need to call this; otherwise bolt modal show infinte spinner.
                            callback();
                        }
                        return;
                    }
                    processSuccess(data);
                };
                // ajax call to the update order transaction data endpoint.
                // passes the bolt transaction reference
                window.fetch(settings.save_order_url, {
                    signal,
                    "headers": {
                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                    },
                    "body": parameters,
                    "method": "POST",
                    "mode": "cors",
                    "credentials": "include"
                })
                    .then(onSuccess)
                    .catch(showError);
            },

            check: function () {
                /**
                 * On Bolt button click check if guest checkout is allowed.
                 * Display login popup to guest customers if it is not. The
                 * Magento customerData and authenticationPopup objects are
                 * used.
                 */
                // check if login is required
                if ( !customer.firstname && !isGuestCheckoutAllowed) {
                    // if authentication is required for checkout set a cookie
                    // for auto opening Bolt checkout after login
                    window.dispatchEvent(
                        new CustomEvent(
                            "toggle-authentication",
                            {
                                detail: {
                                    url: window.location.href
                                }
                            }
                        )
                    );
                    return false;
                }
                // wait for validation module init
                if (!addToCartForm.checkValidity()) {
                    addToCartForm.reportValidity();
                    return false;
                }

                <?php if ($block->isBoltOrderCachingEnabled()): ?>
                //if order caching is enabled cart request must contain a valid form key
                try {
                    var options = cart['items'][0]['options'];
                    if (!JSON.parse(options)['form_key']) {
                        return false;
                    }
                }
                catch {
                    return false;
                }
                <?php endif; ?>
                return true;
            },

            onEmailEnter: function(email) {
                trackCallbacks.onEmailEnter(email);
                if (callbacks.email !== email) {
                    window.fetch(settings.save_email_url, {
                        "headers": {
                            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                        },
                        "body": 'email='+encodeURIComponent(email) + '&form_key=' + hyva.getFormKey(),
                        "method": "POST",
                        "mode": "cors",
                        "credentials": "include"
                    });
                    callbacks.email = email;
                }
            }
        };

        var getQty = function() {
            var quantity = Number(addToCartForm.elements['qty'].value);
            return quantity > 0 ? quantity : 1;
        };

        var getGroupedProductChildQty = function(productId) {
            return Number(addToCartForm.elements['super_group['+productId+']'].value);
        };

        <?php if ($block->isSaveHintsInSections()): ?>
        var hints = sectionData.bolthints || {};
        window.addEventListener('private-content-loaded', function(event) {
            var newHints = event.detail.data.bolthints || {};
            if (JSON.stringify(newHints) !== JSON.stringify(hints)) {
                hints = newHints;
                setupProductPage();
            }
        });
        <?php else: ?>
        var hints = new Promise(function (resolve, reject) {
            window.fetch(settings.get_hints_url).then(
                data => resolve(data.hints)
            ).catch(
                () => resolve({ prefill: {} })
            ).finally(
                () => window.dispatchEvent(new CustomEvent('ppc-hints-set'));
        )
        });
        <?php endif; ?>

        var getItemsData = function () {
            var options = {};
            var compositeAttributes = ['super_attribute', 'options', 'bundle_option', 'bundle_option_qty'];
            var checkboxAttributes = ['links'];
            Array.from(addToCartForm.elements).forEach( ( input, key ) => {
                var name = input.name, value = input.value;
                if (name == '') {
                    return;
                }
                var matchResult;
                for (var index in compositeAttributes) {
                    if (!compositeAttributes.hasOwnProperty(index)) {
                        continue;
                    }
                    var compositeAttribute = compositeAttributes[index];
                    if (matchResult = name.match(compositeAttribute+'\\[(\\d+)\\]')) {
                        if (compositeAttribute != 'bundle_option_qty' && ('checked' in input) && !input.checked) {
                            return;
                        }
                        if (!(compositeAttribute in options)) {
                            options[compositeAttribute] = {};
                        }
                        if (matchResult[1] in options[compositeAttribute]
                            && options[compositeAttribute][matchResult[1]]) {
                            options[compositeAttribute][matchResult[1]] += ',' + value;
                        } else {
                            options[compositeAttribute][matchResult[1]] = value;
                        }
                        return;
                    }
                }

                options[name] = value;
            });
            options['storeId'] = '<?= /* @noEscape */ $block->getStoreId(); ?>';
            options['form_key'] = hyva.getFormKey();

            var items = [];
            <?php if ($block->isGrouped()): ?>
            <?php foreach ($block->getGroupedProductChildren() as $childProduct):?>
            var childProductQty = getGroupedProductChildQty(<?= /* @noEscape */ $childProduct->getId(); ?>);
            if (childProductQty > 0) {
                <?php if ($childProduct->isVirtual()): ?>
                var productType = 'digital';
                <?php else: ?>
                var productType = 'physical';
                <?php endif; ?>
                items.push({
                    reference: '<?= /* @noEscape */ $childProduct->getId(); ?>',
                    price: '<?= /* @noEscape */ $childProduct->getPrice() ?>',
                    name: '<?= /* @noEscape */ addcslashes($childProduct->getName(), "'"); ?>',
                    quantity: childProductQty,
                    options: JSON.stringify(options),
                    type: productType
                });
            }
            <?php endforeach; ?>
            <?php else: ?>
            <?php if ($block->getProduct()->isVirtual()): ?>
            var productType = 'digital';
            <?php else: ?>
            var productType = 'physical';
            <?php endif; ?>
            items.push({
                reference: '<?= /* @noEscape */ $block->getProduct()->getId(); ?>',
                price: itemPrice,
                name: '<?= /* @noEscape */ addcslashes($block->getProduct()->getName(), "'"); ?>',
                quantity: getQty(),
                options: JSON.stringify(options),
                type: productType
            });
            <?php endif; ?>

            return items;
        };

        var cart;
        var setupProductPage = function () {
            cart = {
                currency: "<?= /* @noEscape */ $block->getStoreCurrencyCode(); ?>",
                items: getItemsData()
            };

            // if connect.js is not loaded postpone until it is
            whenDefined(window, 'BoltCheckout', function(){
                BoltCheckout.configureProductCheckout(cart, hints, callbacks);
            }, 'configureProductCheckout');
        };

        addToCartForm.elements['qty'].addEventListener('change', setupProductPage);
        window.addEventListener('update-bundle-option-prices', setupProductPage);
        window.addEventListener('update-prices-<?= /* @noEscape */ $block->getProduct()->getId(); ?>', setupProductPage);

        // Object holding the base item price
        // and price deltas for every custom option selected.
        // The properties are added / updated on custom
        // options change in updatePrice event listened below.
        // The final item price is the sum of all prices stored here.
        var itemPrices = {
            basePrice: <?= /* @noEscape */ $block->getProduct()->getFinalPrice(); ?>
        };

        /**
         * Sum the values of all (numeric) object properties
         * @param obj
         * @returns {number}
         */
        var sum = function (obj) {
            return Object.keys(obj).reduce(
                function(sum,key) {
                    return sum+(parseFloat(obj[key])||0);
                }, 0
            );
        };

        setTimeout(setupProductPage, 500);
    };

    window.addEventListener('private-content-loaded', initBoltProductButton);
</script>
