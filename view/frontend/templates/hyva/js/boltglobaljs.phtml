<?php
/**
 * Bolt magento2 plugin
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   Bolt
 * @package    Bolt_Boltpay
 * @copyright  Copyright (c) 2024 Bolt Financial, Inc (https://www.bolt.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Replace js template
 * Puts / replaces the checkout buttons according to defined selectors.
 * Maintains Bolt checkout functionality.
 *
 * @var $block \Bolt\Boltpay\Block\MinifiedJs
 * @var $secureRenderer \Magento\Framework\View\Helper\SecureHtmlRenderer
 */
if ($block->shouldDisableBoltCheckout()) { return;
}
?>
<?php $scriptString = <<<script
    ////////////////////////////////////////////////////////////////////////
    // Wait for an object to be defined and
    // execute a callback when it becomes available
    ////////////////////////////////////////////////////////////////////////
    /**
     * Map of watched objects to maps of their respective watched properties to configured callbacks
     * @type {Map<Object, Map<string, function[]>>}
     */
    var whenDefinedCallbacks = new Map([]);

    /**
     * Executes provided callback when a property gets defined on provided object.
     * The most common use is waiting for a variable to be defined by an external library
     * using {@see window} as {@see object}
     *
     * @param {Object} object to check for property definition
     * @param {number|string} property that is expected to be defined on {@see object}
     * @param {Function} callback function to be called when {@see property} gets defined on {@see object}
     * @param {null} key deprecated parameter used for setting multiple callbacks per property
     */
    window.whenDefined = function (object, property, callback, key = null) {
        if (object.hasOwnProperty(property)) {
            callback();
        } else {
            var overloadedPropertyName = '_' + property;
            if (!whenDefinedCallbacks.has(object)) {
                whenDefinedCallbacks.set(object, new Map([]));
            }
            if (!whenDefinedCallbacks.get(object).has(property)) {
                whenDefinedCallbacks.get(object).set(property, []);
            }
            var propertyCallbacks = whenDefinedCallbacks.get(object).get(property);
            propertyCallbacks.push(callback);
            Object.defineProperty(object, property, {
                configurable: true,
                enumerable: true,
                writeable: true,
                /**
                 * Retrieves the watched property from overloaded index
                 *
                 * @returns {*} {@see property} value on {@see object}
                 */
                get: function () {
                    return this[overloadedPropertyName];
                },
                /**
                 * Sets the overloaded property index with the provided value then executes configured callbacks
                 *
                 * @param {mixed} value
                 */
                set: function (value) {
                    this[overloadedPropertyName] = value;
                    for (var propertyCallback of propertyCallbacks.values()) {
                        propertyCallback();
                    }
                }
            });
        }
    }

    {$block->getGlobalJS()}
script;
?>
<?= /* @noEscape */ $secureRenderer->renderTag('script', ['type' => 'text/javascript'], $scriptString, false) ?>

<?php
//check if we need Bolt on this page
if (!$block->isOnPageFromWhiteList() && !$block->isMinicartEnabled() && !$block->isBoltProductPage()) { return;
}

$trackCallbackCode = $block->getTrackCallbacks();
$onShippingDetailsCompleteCode = $trackCallbackCode['shipping_details_complete'];
$onShippingOptionsCompleteCode = $trackCallbackCode['shipping_options_complete'];
$onSuccessCode = $block->getJavascriptSuccess() . $trackCallbackCode['success'];
?>
<?php $scriptString = <<<script
    // Store the configuration parameters passed from the php block
    // in the global object. Used in this file and on the payment page in payment method renderer,
    // vendor/boltpay/bolt-magento2/view/frontend/web/js/view/payment/method-renderer/boltpay.js
    window.boltConfig = {$block->getSettings()};

    window.boltConfig.trackCallbacks = {
        onCheckoutStart: {$block->wrapWithCatch($trackCallbackCode['checkout_start'])},
        onEmailEnter: {$block->wrapWithCatch($trackCallbackCode['email_enter'], 'email')},
        onShippingDetailsComplete: {$block->wrapWithCatch($onShippingDetailsCompleteCode, 'address')},
        onShippingOptionsComplete: {$block->wrapWithCatch($onShippingOptionsCompleteCode)},
        onPaymentSubmit: {$block->wrapWithCatch($trackCallbackCode['payment_submit'])},
        onSuccess: {$block->wrapWithCatch($onSuccessCode, 'data')},
        onClose: {$block->wrapWithCatch($trackCallbackCode['close'])},
    };
script;
?>
<?= /* @noEscape */ $secureRenderer->renderTag('script', ['type' => 'text/javascript'], $scriptString, false) ?>
<?= $block->getAdditionalHtml() ?>
